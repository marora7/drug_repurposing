pubtator:
  base_url: "https://ftp.ncbi.nlm.nih.gov/pub/lu/PubTator3/"
  files:
    - "disease2pubtator3.gz"
    - "chemical2pubtator3.gz"
    - "gene2pubtator3.gz"
    - "relation2pubtator3.gz"
  temp_dir: "./data/raw/pubtator/temp"
  sql:
    diseases: |
      CREATE TABLE IF NOT EXISTS diseases (
          entity_id TEXT,
          entity_type TEXT,
          entity_label TEXT,
          entity_name TEXT,
          source TEXT
      );
    chemicals: |
      CREATE TABLE IF NOT EXISTS chemicals (
          entity_id TEXT,
          entity_type TEXT,
          entity_label TEXT,
          entity_name TEXT,
          source TEXT
      );
    genes: |
      CREATE TABLE IF NOT EXISTS genes (
          entity_id TEXT,
          entity_type TEXT,
          entity_label TEXT,
          entity_name TEXT,
          source TEXT
      );
    relations: |
      CREATE TABLE IF NOT EXISTS relations (
          id TEXT,
          entity_relation TEXT,
          entity1 TEXT,
          entity2 TEXT
      );

database:
  pubtator_db: "./data/processed/pubtator.db"
  ncbi_db: "./data/processed/ncbi.db"

download:
  chunk_size: 8192

ncbi:
  gene_info_file: "Homo_sapiens.gene_info.gz"
  gene_info_url: "https://ftp.ncbi.nih.gov/gene/DATA/GENE_INFO/Mammalia/"
  table_name: "homo_sapiens_genes"
  temp_dir: "./data/raw/ncbi/temp"
  sql: |
    DROP TABLE IF EXISTS {table_name};
    CREATE TABLE {table_name} (
        "[#tax_id]" TEXT,
        GeneID TEXT,
        Symbol TEXT,
        LocusTag TEXT,
        Synonyms TEXT,
        dbXrefs TEXT,
        chromosome TEXT,
        map_location TEXT,
        description TEXT,
        type_of_gene TEXT,
        Symbol_from_nomenclature_authority TEXT,
        Full_name_from_nomenclature_authority TEXT,
        Nomenclature_status TEXT,
        Other_designations TEXT,
        Modification_date TEXT,
        Feature_type TEXT
    );

nodes:
  table_name: "nodes"

edges:
  table_name: "edges"

genes:
  table_name: "homo_sapiens_genes"
  index_column: "GeneID"

transformation:
  nodes:
    query: >
      SELECT 
          node_type || ':' || node_id AS "Id:ID",
          node_type AS ":LABEL",
          node_name AS name
      FROM nodes
    output: "F:/datasets/nodes.csv.gz"

  edges:
    grouping:
      drop_table: "DROP TABLE IF EXISTS edges_grouped;"
      create_table: >
        CREATE TABLE edges_grouped AS
        SELECT 
            node1_id,
            node1_type,
            node2_id,
            node2_type,
            edge_type,
            COUNT(DISTINCT edge_id) AS unique_edge_count
        FROM edges
        GROUP BY node1_id, node1_type, node2_id, node2_type, edge_type;
    export_query: >
      SELECT 
          node1_type || ':' || node1_id AS ":START_ID",
          node1_type AS node1_type,
          node2_type || ':' || node2_id AS ":END_ID",
          node2_type AS node2_type,
          edge_type AS ":TYPE",
          unique_edge_count AS pmcount
      FROM edges_grouped
    output: "F:/datasets/edges.csv.gz"

knowledge_graph:
  neo4j_bin_dir: "C:\\Users\\Manali Arora\\.Neo4jDesktop\\relate-data\\dbmss\\dbms-68825c1d-13da-4e5e-94df-454c0cafee7a\\bin"
  neo4j_admin: "neo4j-admin.bat"
  nodes_csv_gz: "F:/datasets/nodes.csv.gz"
  edges_csv_gz: "F:/datasets/edges.csv.gz"
  nodes_csv: "F:/datasets/nodes.csv"
  edges_csv: "F:/datasets/edges.csv"
  database_name: "drugrepurposing"
