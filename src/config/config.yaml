pubtator:
  base_url: "https://ftp.ncbi.nlm.nih.gov/pub/lu/PubTator3/"
  files:
    - "disease2pubtator3.gz"
    - "chemical2pubtator3.gz"
    - "gene2pubtator3.gz"
    - "relation2pubtator3.gz"
  temp_dir: "./data/raw/pubtator/temp"
  sql:
    diseases: |
      CREATE TABLE IF NOT EXISTS diseases (
          entity_id TEXT,
          entity_type TEXT,
          entity_label TEXT,
          entity_name TEXT,
          source TEXT
      );
    chemicals: |
      CREATE TABLE IF NOT EXISTS chemicals (
          entity_id TEXT,
          entity_type TEXT,
          entity_label TEXT,
          entity_name TEXT,
          source TEXT
      );
    genes: |
      CREATE TABLE IF NOT EXISTS genes (
          entity_id TEXT,
          entity_type TEXT,
          entity_label TEXT,
          entity_name TEXT,
          source TEXT
      );
    relations: |
      CREATE TABLE IF NOT EXISTS relations (
          id TEXT,
          entity_relation TEXT,
          entity1 TEXT,
          entity2 TEXT
      );

database:
  pubtator_db: "data/processed/pubtator.db"
  ncbi_db: "data/processed/ncbi.db"

download:
  chunk_size: 8192

ncbi:
  gene_info_file: "Homo_sapiens.gene_info.gz"
  gene_info_url: "https://ftp.ncbi.nih.gov/gene/DATA/GENE_INFO/Mammalia/"
  table_name: "homo_sapiens_genes"
  temp_dir: "./data/raw/ncbi/temp"
  sql: |
    DROP TABLE IF EXISTS {table_name};
    CREATE TABLE {table_name} (
        "[#tax_id]" TEXT,
        GeneID TEXT,
        Symbol TEXT,
        LocusTag TEXT,
        Synonyms TEXT,
        dbXrefs TEXT,
        chromosome TEXT,
        map_location TEXT,
        description TEXT,
        type_of_gene TEXT,
        Symbol_from_nomenclature_authority TEXT,
        Full_name_from_nomenclature_authority TEXT,
        Nomenclature_status TEXT,
        Other_designations TEXT,
        Modification_date TEXT,
        Feature_type TEXT
    );

nodes:
  table_name: "nodes"
  # SQL to drop (if exists) and create the nodes table.
  sql: |
    DROP TABLE IF EXISTS {table_name};
    CREATE TABLE {table_name} (
        node_type TEXT,
        node_id TEXT,
        node_name TEXT
    );
  # Template for processing source tables.
  process_table_query: "SELECT {node_type_column}, {node_id_column}, {node_name_column} FROM {source_table}"
  # Query to obtain statistics (row counts per node_type) from the nodes table.
  stats_query: "SELECT node_type, COUNT(*) AS row_count FROM {table_name} GROUP BY node_type"
  # Template for obtaining sample rows for a given node_type.
  sample_query: "SELECT * FROM {table_name} WHERE node_type = '{node_type}' LIMIT 5"
  # Query to select all rows from the nodes table.
  select_all_query: "SELECT * FROM {table_name}"

indexes:
  # Indexes for source tables and nodes table.
  diseases_entity: "CREATE INDEX IF NOT EXISTS idx_diseases_entity ON diseases(entity_type, entity_label);"
  chemicals_entity: "CREATE INDEX IF NOT EXISTS idx_chemicals_entity ON chemicals(entity_type, entity_label);"
  genes_entity: "CREATE INDEX IF NOT EXISTS idx_genes_entity ON genes(entity_type, entity_label);"
  nodes_entity: "CREATE INDEX IF NOT EXISTS idx_nodes ON nodes(node_type, node_id);"
  # New index for genes on the GeneID column:
  genes_geneid: "CREATE INDEX IF NOT EXISTS idx_genes_geneid ON genes(entity_label);"


edges:
  table_name: "edges"
  # SQL to drop (if exists) and create the edges table.
  sql: |
    DROP TABLE IF EXISTS {table_name};
    CREATE TABLE {table_name} (
        edge_id TEXT,
        edge_type TEXT,
        node1 TEXT,
        node2 TEXT
    );
  # SQL to insert data from the relations table.
  insert_sql: |
    INSERT INTO {table_name} (edge_id, edge_type, node1, node2)
    SELECT id AS edge_id, entity_relation AS edge_type, entity1 AS node1, entity2 AS node2
    FROM relations;
  # SQL to create a temporary table with derived columns.
  temp_sql: |
    CREATE TABLE edges_temp AS
    SELECT *,
           SUBSTR(node1, 1, INSTR(node1, '|') - 1) AS node1_type,
           SUBSTR(node1, INSTR(node1, '|') + 1) AS node1_id,
           SUBSTR(node2, 1, INSTR(node2, '|') - 1) AS node2_type,
           SUBSTR(node2, INSTR(node2, '|') + 1) AS node2_id
    FROM {table_name};
  # SQL to drop the original table and rename the temporary table.
  drop_temp_and_rename_sql: |
    DROP TABLE {table_name};
    ALTER TABLE edges_temp RENAME TO {table_name};
  # Query to count rows in the edges table.
  count_sql: "SELECT COUNT(*) FROM {table_name};"
  # Query to count rows that do not meet the allowed node types.
  filter_count_sql: |
    SELECT COUNT(*)
    FROM {table_name}
    WHERE node1_type NOT IN ('Disease', 'Gene', 'Chemical')
       OR node2_type NOT IN ('Disease', 'Gene', 'Chemical');
  # SQL to create a filtered table with only allowed node types.
  filter_create_sql: |
    CREATE TABLE edges_filtered AS
    SELECT *
    FROM {table_name}
    WHERE node1_type IN ('Disease', 'Gene', 'Chemical')
      AND node2_type IN ('Disease', 'Gene', 'Chemical');
  # SQL to delete rows with unmatched nodes.
  delete_unmatched_sql: |
    DELETE FROM {table_name}
    WHERE node1 NOT IN (SELECT node_type || '|' || node_id FROM nodes)
       OR node2 NOT IN (SELECT node_type || '|' || node_id FROM nodes);

genes:
  table_name: "homo_sapiens_genes"
  index_column: "GeneID"

gene_info_select:
  # Query to get row counts by node_type from the nodes table.
  nodes_counts_query: "SELECT node_type, COUNT(*) AS row_count FROM {nodes_table} GROUP BY node_type"
  # Query to delete rows from the nodes table where node_type is 'Gene'
  # and node_id does not appear in the genes table (matching on GeneID).
  delete_query: |
    DELETE FROM {nodes_table}
    WHERE node_type = 'Gene'
      AND node_id NOT IN (
        SELECT DISTINCT {gene_index_column}
        FROM ncbi.{genes_table}
      );

transformation:
  nodes:
    query: >
      SELECT 
          node_type || ':' || node_id AS "Id:ID",
          node_type AS ":LABEL",
          node_name AS name
      FROM nodes
    output: "data/exports/nodes.csv.gz"

  edges:
    grouping:
      drop_table: "DROP TABLE IF EXISTS edges_grouped;"
      create_table: >
        CREATE TABLE edges_grouped AS
        SELECT 
            node1_id,
            node1_type,
            node2_id,
            node2_type,
            edge_type,
            COUNT(DISTINCT edge_id) AS unique_edge_count
        FROM edges
        GROUP BY node1_id, node1_type, node2_id, node2_type, edge_type;
    export_query: >
      SELECT 
          node1_type || ':' || node1_id AS ":START_ID",
          node1_type AS node1_type,
          node2_type || ':' || node2_id AS ":END_ID",
          node2_type AS node2_type,
          edge_type AS ":TYPE",
          unique_edge_count AS "pmcount:int"
      FROM edges_grouped
    output: "data/exports/edges.csv.gz"

knowledge_graph:
  neo4j_bin_dir: "C:/Users/YourName/.Neo4jDesktop/relate-data/dbmss/dbms-<id>/bin"
  neo4j_admin: "neo4j-admin.bat"
  nodes_csv_gz: "data/exports/nodes.csv.gz"
  edges_csv_gz: "data/exports/edges.csv.gz"
  nodes_csv: "data/exports/nodes.csv"
  edges_csv: "data/exports/edges.csv"
  database_name: "drugrepurposing"


#ml_input_dir: "data/processed/ml_input"
#seed: 0
#k: 15

data_dir: "data/processed/train"

# Path to the nodes CSV file (gzipped)
nodes_file: "data/exports/nodes.csv.gz"

# Path to the edges CSV file (gzipped)
edges_file: "data/exports/edges.csv.gz"

# Directory where the output files (train.tsv, test.tsv, val.tsv) will be saved
output_dir: "data/processed/train"

# Path to the training, entities and relations TSV file
train_file: "train.tsv"
entities_file: "entities.tsv"
relations_file: "relations.tsv"

# Path to the saved entity embeddings (.npy file)
entity_embedding_path: "ckpts/TransE_l2_drug_repurposing_14/drug_repurposing_TransE_l2_entity.npy"

# Path to the saved relation embeddings (.npy file)
relation_embedding_path: "ckpts/TransE_l2_drug_repurposing_14/drug_repurposing_TransE_l2_relation.npy"

# (Optional) Number of tail predictions to return for each relation
#top_k: 10

ml_model:
  query: >
      SELECT 
          '' AS distance,
          n."Id:ID" AS drug_id,
          n.name AS drug_name,
          disease."Id:ID" AS disease_id,
          disease.name AS disease_name,
          e.":TYPE" AS relation,
          e."pmcount:int" AS pmid,
          CASE WHEN e.":TYPE" = 'treat' THEN TRUE ELSE FALSE END AS drug_to_disease
      FROM edges e
      JOIN nodes n 
        ON e.":START_ID" = n."Id:ID" AND n.":LABEL" = 'Chemical'
      JOIN nodes disease 
        ON e.":END_ID" = disease."Id:ID" AND disease.":LABEL" = 'Disease';
  
  db_path: "data/processed/pubtator.db"
  table_name: "treat_relations"
  top_k: 100  # Number of top predictions to return per disease
  progress_tracking_db: "data/processed/prediction_progress.db"  # Path to track processing progress

# Database SQL queries
sql_queries:
  # Table creation queries
  create_completed_diseases_table: |
    CREATE TABLE IF NOT EXISTS completed_diseases (
        disease_id TEXT PRIMARY KEY,
        timestamp TEXT,
        status TEXT,
        error_message TEXT
    )

  create_batches_table: |
    CREATE TABLE IF NOT EXISTS batches (
        batch_id INTEGER PRIMARY KEY,
        start_time TEXT,
        end_time TEXT,
        status TEXT,
        num_diseases INTEGER
    )

  # Data retrieval queries
  get_completed_diseases: |
    SELECT disease_id FROM completed_diseases WHERE status = 'completed'

  # Data insertion and update queries
  mark_disease_completed: |
    INSERT OR REPLACE INTO completed_diseases
    (disease_id, timestamp, status, error_message)
    VALUES (?, ?, ?, ?)

  record_batch_start: |
    INSERT INTO batches
    (batch_id, start_time, status, num_diseases)
    VALUES (?, ?, ?, ?)

  record_batch_end: |
    UPDATE batches
    SET end_time = ?, status = ?
    WHERE batch_id = ?

# Model configuration
model:
  checkpoint_frequency: 10  # Save checkpoints after every 10 batches

# Processing configuration
processing:
  default_batch_size: 100
  default_num_workers: 4
  timeout_seconds: 3600  # 1 hour timeout per disease
  max_retries: 2  # Number of times to retry a failed disease

# Output configuration
output:
  log_level: INFO
  detailed_logging: true

#Data generation for post processing
post_processing:
  create_relations_before_prediction: |
    CREATE TABLE IF NOT EXISTS relations_before_prediction (
      start_id TEXT,
      start_id_type TEXT,
      start_id_name TEXT,
      end_id TEXT,
      end_id_type TEXT,
      end_id_name TEXT,
      relation TEXT,
      pmcount INTEGER,
      PRIMARY KEY (start_id, end_id, relation)
    )
  
  insert_relations_before_prediction: |
    INSERT OR IGNORE INTO relations_before_prediction (
      start_id, start_id_type, start_id_name, 
      end_id, end_id_type, end_id_name, 
      relation, pmcount
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
  
  # Optional but recommended indexes for better query performance
  indexes_relations_before_prediction:
    - CREATE INDEX IF NOT EXISTS idx_rel_start_id ON relations_before_prediction(start_id)
    - CREATE INDEX IF NOT EXISTS idx_rel_end_id ON relations_before_prediction(end_id)
    - CREATE INDEX IF NOT EXISTS idx_rel_relation ON relations_before_prediction(relation)
    - CREATE INDEX IF NOT EXISTS idx_rel_start_type ON relations_before_prediction(start_id_type)
    - CREATE INDEX IF NOT EXISTS idx_rel_end_type ON relations_before_prediction(end_id_type)
    
  # Relations after prediction table
  create_relations_after_prediction: |
    CREATE TABLE IF NOT EXISTS relations_after_prediction (
      disease_id TEXT,
      disease_name TEXT,
      drug_id TEXT,
      drug_name TEXT,
      relation TEXT,
      distance REAL,
      status TEXT,
      PRIMARY KEY (disease_id, drug_id, relation)
    )
    
  insert_relations_after_prediction: |
    INSERT OR IGNORE INTO relations_after_prediction (
      disease_id, disease_name, drug_id, drug_name, relation, distance, status
    )
    SELECT 
      SUBSTR(tr.disease, 10) AS disease_id,
      (SELECT rbp.start_id_name 
       FROM relations_before_prediction rbp 
       WHERE rbp.start_id = SUBSTR(tr.disease, 10) 
       LIMIT 1) AS disease_name,
      SUBSTR(tr.drug, 11) AS drug_id,
      (SELECT rbp.end_id_name 
       FROM relations_before_prediction rbp 
       WHERE rbp.end_id = SUBSTR(tr.drug, 11) 
       LIMIT 1) AS drug_name,
      CASE
        WHEN INSTR(tr.relation, ':') > 0 THEN SUBSTR(tr.relation, 1, INSTR(tr.relation, ':') - 1)
        ELSE tr.relation
      END AS relation,
      tr.distance,
      tr.status
    FROM treat_relations tr
    
  # Optional but recommended indexes for better query performance
  indexes_relations_after_prediction:
    - CREATE INDEX IF NOT EXISTS idx_rel_after_disease_id ON relations_after_prediction(disease_id)
    - CREATE INDEX IF NOT EXISTS idx_rel_after_drug_id ON relations_after_prediction(drug_id)
    - CREATE INDEX IF NOT EXISTS idx_rel_after_relation ON relations_after_prediction(relation)
    - CREATE INDEX IF NOT EXISTS idx_rel_after_status ON relations_after_prediction(status)
  
# LLM configuration
llm_configuration:
  api_url: "http://localhost:11434/api/generate"
  model_name: "llama3.2"

# Drug classification settings
drug_classification:
  input_table: relations_after_prediction

# Disease classification settings
disease_classification:
  input_table: relations_after_prediction

# Drug classification prompt
drugs_prompt: |
  You are a pharmaceutical classification expert. Classify the following drug/compound into ONE of these categories:
  
  1. FDA-Approved Drugs - Medications already approved for human use
  2. Non-Approved Compounds - Drugs in research or clinical trial phases
  3. Vitamins/Nutrients/Supplements - Essential compounds and supplements
  4. Research Tools/Reagents - Compounds primarily used in laboratory settings
  5. Unclassified/Other - Compounds that don't fit clearly into other categories
  
  Drug ID: {drug_id}
  Drug name: {drug_name}
  
  Respond in valid JSON format with the following structure:
  {{
      "drug_id": "{drug_id}",
      "category": [number between 1-5],
      "category_name": "[full name of the category]",
      "reasoning": "[brief explanation for your classification]",
      "confidence": [number between 0-1 indicating your confidence]
  }}
  
  IMPORTANT: Make sure to enclose all text in double quotes. The entire JSON must be valid.

# Disease classification prompt
diseases_prompt: |
  You are a medical classification expert. Classify the following disease/medical condition:

  Disease ID: {disease_id}
  Disease/condition name: {disease_name}

  FIRST CLASSIFICATION - Disease Type:
  1. Primary Treatable Diseases - Medical conditions (including congenital ones) that are direct targets for drug therapy (e.g., autoimmune diabetes, neonatal diabetes)
  2. Symptoms/Complications - Clinical manifestations or secondary effects of diseases (e.g., loss of awareness, diabetic coma)
  3. Structural Conditions - Physical or anatomical abnormalities primarily addressed through surgical intervention rather than medication (e.g., cleft palate, certain heart defects)
  4. Interventions/Procedures - Medical interventions or procedures (e.g., amputation, transplantation)
  5. Other Medical Entities - Medical entities that don't fit clearly into the above categories

  IMPORTANT: After determining the above classification, ONLY IF the disease is classified as "Primary Treatable Disease" (type 1), then proceed to classify it into one of the therapeutic areas below:

  SECOND CLASSIFICATION (ONLY for Primary Treatable Diseases) - Therapeutic Area:
  1. Oncology - All types of cancers and related conditions
  2. Cardiovascular - Heart diseases, stroke, hypertension, arrhythmias
  3. Neurology/CNS - Neurological disorders, Alzheimer's, Parkinson's, epilepsy, multiple sclerosis
  4. Infectious Diseases - Bacterial, viral, fungal infections, including HIV, tuberculosis, hepatitis
  5. Metabolic/Endocrine - Diabetes, thyroid disorders, metabolic syndrome, obesity
  6. Immunology/Inflammation - Autoimmune diseases, allergies, rheumatoid arthritis, psoriasis
  7. Respiratory - Asthma, COPD, pulmonary fibrosis, pneumonia
  8. Gastroenterology - IBD, IBS, GERD, liver diseases, pancreatic disorders
  9. Dermatology - Skin conditions, eczema, acne, dermatitis
  10. Nephrology/Urology - Kidney diseases, UTIs, renal failure, bladder disorders
  11. Hematology - Blood disorders, anemia, leukemia, clotting disorders
  12. Musculoskeletal - Bone and joint diseases, osteoporosis, arthritis
  13. Ophthalmology - Eye diseases, glaucoma, macular degeneration
  14. Psychiatry/Mental Health - Depression, anxiety, schizophrenia, bipolar disorder
  15. Rare Diseases - Orphan diseases, genetic disorders
  16. Unclassified/Other - Diseases that don't fit clearly into other categories or lack sufficient information for classification
  
  Respond in valid JSON format with the following structure:
  
  If the disease is a Primary Treatable Disease (type 1):
  {{
      "disease_type": 1,
      "disease_type_name": "Primary Treatable Diseases",
      "therapeutic_area": 5,
      "therapeutic_area_name": "Metabolic/Endocrine",
      "reasoning": "Brief explanation for your classification",
      "confidence": 0.9
  }}
  
  If the disease is NOT a Primary Treatable Disease:
  {{
      "disease_type": 2,  // or 3, 4, 5 as appropriate
      "disease_type_name": "Symptoms/Complications",  // or the appropriate name
      "therapeutic_area": 16,
      "therapeutic_area_name": "Unclassified/Other",
      "reasoning": "Brief explanation for your classification",
      "confidence": 0.9
  }}
  
  IMPORTANT:
  1. DO NOT return lists/arrays for any values - use single values only
  2. For disease_type, use a single integer (1-5)
  3. For therapeutic_area, ALWAYS use a single integer: specific value (1-15) for Primary Treatable Diseases, or 16 for non-Primary Treatable Diseases
  4. For therapeutic_area_name, ALWAYS include a value: specific area for Primary Treatable Diseases, or "Unclassified/Other" for non-Primary Treatable Diseases
  5. Make sure the entire JSON is valid
  6. Do not include extra quotes within values
  7. DO NOT use null values for any field

# Classification queries
classification_queries:
  # Query to get drugs from database
  get_drugs_query: "SELECT drug_id, drug_name FROM {table} GROUP BY drug_id"
  
  # Query to get diseases from database
  get_diseases_query: "SELECT disease_id, disease_name FROM {table} GROUP BY disease_id"
  
  # Query to create drugs_grouping table
  create_drugs_grouping_table: |
    CREATE TABLE IF NOT EXISTS drugs_grouping (
      drug_id TEXT PRIMARY KEY,
      drug_name TEXT,
      category INTEGER,
      category_name TEXT,
      confidence REAL,
      reasoning TEXT
    )
  
  # Query to create diseases_grouping table
  create_diseases_grouping_table: |
    CREATE TABLE IF NOT EXISTS diseases_grouping (
      disease_id TEXT PRIMARY KEY,
      disease_name TEXT,
      disease_type INTEGER,
      disease_type_name TEXT,
      therapeutic_area INTEGER,
      therapeutic_area_name TEXT,
      confidence REAL,
      reasoning TEXT
    )

  # Query to insert drug classification
  insert_drug_classification: |
    INSERT OR REPLACE INTO drugs_grouping 
    (drug_id, drug_name, category, category_name, confidence, reasoning) 
    VALUES (?, ?, ?, ?, ?, ?)

  # Query to insert disease classification
  insert_disease_classification: |
    INSERT OR REPLACE INTO diseases_grouping 
    (disease_id, disease_name, disease_type, disease_type_name, therapeutic_area, therapeutic_area_name, confidence, reasoning) 
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)